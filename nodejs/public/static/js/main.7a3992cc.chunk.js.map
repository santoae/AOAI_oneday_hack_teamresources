{"version":3,"sources":["images/logo.png","components/BotMessage.jsx","components/UserMessage.jsx","components/Messages.jsx","components/Input.jsx","ChatbotAPI.js","components/FloatingForm.jsx","components/Header.jsx","index.js"],"names":["module","exports","__webpack_require__","p","BotMessage","_ref","fetchMessage","isLoading","setLoading","useState","message","setMessage","useEffect","async","msg","loadMessage","React","createElement","className","UserMessage","text","Messages","messages","el","useRef","current","scrollIntoView","block","behavior","id","ref","Input","onSend","setText","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","version","xmlns","width","height","viewBox","points","API","GetChatbotResponse","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","Content-Type","then","response","json","data","catch","error","GetImageURL","formData","url","FloatingForm","updateLogoUrl","setFormData","face","eyebrows","eye_color","facial_features","hair","clothes","weight","other_apparel","isModalOpen","setIsModalOpen","handleChange","name","[object Object]","onClick","openModal","class","closeModal","console","log","for","Header","logoUrl","src","LogoImage","Chatbot","setMessages","setLogoUrl","key","loadWelcomeMessage","newMessages","concat","length","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7a3992cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b97c341.png\";","import React, { useState, useEffect } from \"react\";\n\nexport default function BotMessage({ fetchMessage }) {\n  const [isLoading, setLoading] = useState(true);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    async function loadMessage() {\n      const msg = await fetchMessage();\n      setLoading(false);\n      setMessage(msg);\n    }\n    loadMessage();\n  }, [fetchMessage]);\n\n  return (\n    <div className=\"message-container\">\n      <div className=\"bot-message\">{isLoading ? \"...\" : message}</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function UserMessage({ text }) {\n  return (\n    <div className=\"message-container\">\n      <div className=\"user-message\">{text}</div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport default function Messages({ messages }) {\n  const el = useRef(null);\n  useEffect(() => {\n    el.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n  });\n  return (\n    <div className=\"messages\">\n      {messages}\n      <div id={\"el\"} ref={el} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function Input({ onSend }) {\n  const [text, setText] = useState(\"\");\n\n  const handleInputChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleSend = e => {\n    e.preventDefault();\n    onSend(text);\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"input\">\n      <form onSubmit={handleSend}>\n        <input\n          type=\"text\"\n          onChange={handleInputChange}\n          value={text}\n          placeholder=\"Enter your message here\"\n        />\n        <button>\n          <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 500 500\"\n          >\n            <g>\n              <g>\n                <polygon points=\"0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75\" />\n              </g>\n            </g>\n          </svg>\n        </button>\n      </form>\n    </div>\n  );\n}\n","const API = {\n  GetChatbotResponse: async message => {\n    return new Promise(function(resolve, reject) {\n      if (message === \"hi\") \n        resolve(\"Welcome to chatbot!\");\n      else {\n        // Call the chatbot API sending POST request\n        // with the message as the body to the API endpoint /chat\n        fetch('/chat', {\n          method: 'POST',\n          body: JSON.stringify({ \"message\": message }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(response => response.json())\n          .then(data => resolve(data.message))\n          .catch(error => reject(error));\n\n        // resolve(\"echo : \" + response.message);\n\n      }         \n    });\n  },\n  GetImageURL: async formData => {\n    return new Promise(function(resolve, reject) {\n      // Call the chatbot API sending POST request\n      // with the message as the body to the API endpoint /chat\n      fetch('/generateImage', {\n        method: 'POST',\n        body: JSON.stringify(formData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => response.json())\n        .then(data => resolve(data.url))\n        .catch(error => reject(error));\n\n\n    });\n  }\n};\n\nexport default API;\n","import React, { useState } from 'react';\nimport './FloatingForm.css'; // Import the stylesheet\n\nimport API from '../ChatbotAPI'; // Import the API module\n\nconst FloatingForm = ({ updateLogoUrl }) => {\n  const [formData, setFormData] = useState({\n    face: '',\n    eyebrows: '',\n    eye_color: '',\n    facial_features: '',\n    hair: '',\n    clothes: '',\n    height: '',\n    weight: '',\n    other_apparel: '',\n  });\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // You can add your form submission logic here\n    console.log('Form data submitted:', formData);\n\n    // Call the API to generate the image URL\n    // and update the logo URL\n    API.GetImageURL(formData).then((url) => {\n      updateLogoUrl(url);\n    });\n    // updateLogoUrl(\"https://www.example.com/logo.png\"); // Update the logo URL\n    setIsModalOpen(false); // Close the modal after submission\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className=\"floating-form-container\">\n        <button onClick={openModal}>Create your Avatar</button>\n        {isModalOpen && (\n            <div className=\"modal-overlay\">\n            <div className=\"modal\">\n                <div class=\"close-btn-header\">\n                    <span className=\"close-btn\" onClick={closeModal}>\n                        &times;\n                    </span>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"floating-form\">\n                    <label for=\"face\">\n                    Face:\n                    </label>\n                    <input\n                        type=\"text\"\n                        name=\"face\"\n                        value={formData.face}\n                        onChange={handleChange}\n                    />\n                    <br />\n\n                    <label>\n                    Eye Brows:\n                    <input\n                        type=\"text\"\n                        name=\"eyebrows\"\n                        value={formData.eyebrows}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Eye Color:\n                    <input\n                        type=\"text\"\n                        name=\"eye_color\"\n                        value={formData.eye_color}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Facial Features:\n                    <input\n                        type=\"text\"\n                        name=\"facial_features\"\n                        value={formData.facial_features}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Hair:\n                    <input\n                        type=\"text\"\n                        name=\"hair\"\n                        value={formData.hair}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Clothes:\n                    <input\n                        type=\"text\"\n                        name=\"clothes\"\n                        value={formData.clothes}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Height:\n                    <input\n                        type=\"text\"\n                        name=\"height\"\n                        value={formData.height}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Weight:\n                    <input\n                        type=\"text\"\n                        name=\"weight\"\n                        value={formData.weight}\n                        onChange={handleChange}\n                    />\n                    </label>\n\n                    <label>\n                    Other Apparel:\n                    <input\n                        type=\"text\"\n                        name=\"other_apparel\"\n                        value={formData.other_apparel}\n                        onChange={handleChange}\n                    />\n                    </label>\n                    \n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FloatingForm;\n","import React from \"react\";\nimport LogoImage from \"../images/logo.png\";\n\nexport default function Header({ logoUrl}) {\n  return <div className=\"header\">\n    <div class=\"header-text\">Your Personal Movie Assistant</div>\n    <div class=\"header-logo\"><img src={logoUrl ? logoUrl : LogoImage} width=\"100px\" /></div></div>;\n}","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport BotMessage from \"./components/BotMessage\";\nimport UserMessage from \"./components/UserMessage\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\nimport FloatingForm from \"./components/FloatingForm\";\n\nimport API from \"./ChatbotAPI\";\n\nimport \"./styles.css\";\nimport Header from \"./components/Header\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [logoUrl, setLogoUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      setMessages([\n        <BotMessage\n          key=\"0\"\n          fetchMessage={async () => await API.GetChatbotResponse(\"hi\")}\n        />\n      ]);\n    }\n    loadWelcomeMessage();\n  }, []);\n\n  const updateLogoUrl = (value) => {\n    setLogoUrl(value);\n  }\n\n  const send = async text => {\n    const newMessages = messages.concat(\n      <UserMessage key={messages.length + 1} text={text} />,\n      <BotMessage\n        key={messages.length + 2}\n        fetchMessage={async () => await API.GetChatbotResponse(text)}\n      />\n    );\n    setMessages(newMessages);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <Header logoUrl={logoUrl}/>\n      <Messages messages={messages} />\n      <Input onSend={send} />\n\n      <FloatingForm updateLogoUrl={updateLogoUrl} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Chatbot />, rootElement);\n"],"sourceRoot":""}